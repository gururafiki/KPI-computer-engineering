; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	C:\Users\Макс\Desktop\lab4_18\lab4_18\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PrintBinary
PUBLIC	_main
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	??_C@_0L@JEDFFGJO@Before?3?5?6?6?$AA@		; `string'
PUBLIC	??_C@_06IJELEBCC@M1?5?$DN?5?6?$AA@		; `string'
PUBLIC	??_C@_06PNPDDIM@M2?5?$DN?5?6?$AA@		; `string'
PUBLIC	??_C@_0L@KBOEBOCH@New?5M1?5?$DN?5?6?$AA@	; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__printf:PROC
EXTRN	_Big2sSub:PROC
EXTRN	_srand:PROC
EXTRN	_time:PROC
EXTRN	_getch:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@KBOEBOCH@New?5M1?5?$DN?5?6?$AA@
CONST	SEGMENT
??_C@_0L@KBOEBOCH@New?5M1?5?$DN?5?6?$AA@ DB 'New M1 = ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNPDDIM@M2?5?$DN?5?6?$AA@
CONST	SEGMENT
??_C@_06PNPDDIM@M2?5?$DN?5?6?$AA@ DB 'M2 = ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJELEBCC@M1?5?$DN?5?6?$AA@
CONST	SEGMENT
??_C@_06IJELEBCC@M1?5?$DN?5?6?$AA@ DB 'M1 = ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEDFFGJO@Before?3?5?6?6?$AA@
CONST	SEGMENT
??_C@_0L@JEDFFGJO@Before?3?5?6?6?$AA@ DB 'Before: ', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\макс\desktop\lab4_18\lab4_18\main.c
;	COMDAT _main
_TEXT	SEGMENT
$T1 = -372						; size = 4
$T2 = -360						; size = 4
$T3 = -348						; size = 4
_i$4 = -144						; size = 4
_z$ = -132						; size = 36
_y$ = -88						; size = 36
_x$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 27   : 	srand(time(NULL));

	push	0
	call	_time
	add	esp, 4
	push	eax
	call	_srand
	add	esp, 4

; 28   : 	byte x[n], y[n],z[n]; //надвеликі числа
; 29   : 	for (int i = 0; i<n; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN3@main
$LN2@main:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN3@main:
	cmp	DWORD PTR _i$4[ebp], 36			; 00000024H
	jge	SHORT $LN1@main

; 30   : 	{
; 31   : 		x[i] = 0;

	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 36			; 00000024H
	jae	SHORT $LN6@main
	jmp	SHORT $LN7@main
$LN6@main:
	call	___report_rangecheckfailure
$LN7@main:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _x$[ebp+ecx], 0

; 32   : 		y[i] = 0;

	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 36			; 00000024H
	jae	SHORT $LN8@main
	jmp	SHORT $LN9@main
$LN8@main:
	call	___report_rangecheckfailure
$LN9@main:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _y$[ebp+ecx], 0

; 33   : 		z[i] = 0;

	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 36			; 00000024H
	jae	SHORT $LN10@main
	jmp	SHORT $LN11@main
$LN10@main:
	call	___report_rangecheckfailure
$LN11@main:
	mov	ecx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _z$[ebp+ecx], 0

; 34   : 	}

	jmp	$LN2@main
$LN1@main:

; 35   : 	y[2] = 8;

	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _y$[ebp+eax], 8

; 36   : 	printf("Before: \n\n");

	mov	esi, esp
	push	OFFSET ??_C@_0L@JEDFFGJO@Before?3?5?6?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   : 	printf("M1 = \n");

	mov	esi, esp
	push	OFFSET ??_C@_06IJELEBCC@M1?5?$DN?5?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   : 	PrintBinary(x,n);

	push	36					; 00000024H
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_PrintBinary
	add	esp, 8

; 39   : 	printf("M2 = \n");

	mov	esi, esp
	push	OFFSET ??_C@_06PNPDDIM@M2?5?$DN?5?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 40   : 	PrintBinary(y,n);

	push	36					; 00000024H
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	call	_PrintBinary
	add	esp, 8

; 41   : 	Big2sSub(x, y, n);

	push	36					; 00000024H
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Big2sSub
	add	esp, 12					; 0000000cH

; 42   : 	printf("New M1 = \n");

	mov	esi, esp
	push	OFFSET ??_C@_0L@KBOEBOCH@New?5M1?5?$DN?5?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 	PrintBinary(x,n);

	push	36					; 00000024H
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_PrintBinary
	add	esp, 8

; 44   : 	getch();

	call	_getch

; 45   : 	return 0;

	xor	eax, eax
$LN5@main:

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@main:
	DD	3
	DD	$LN15@main
$LN15@main:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN12@main
	DD	-88					; ffffffa8H
	DD	36					; 00000024H
	DD	$LN13@main
	DD	-132					; ffffff7cH
	DD	36					; 00000024H
	DD	$LN14@main
$LN14@main:
	DB	122					; 0000007aH
	DB	0
$LN13@main:
	DB	121					; 00000079H
	DB	0
$LN12@main:
	DB	120					; 00000078H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\макс\desktop\lab4_18\lab4_18\main.c
;	COMDAT _PrintBinary
_TEXT	SEGMENT
tv165 = -220						; size = 4
tv157 = -220						; size = 4
tv149 = -220						; size = 4
tv141 = -220						; size = 4
tv133 = -220						; size = 4
tv93 = -220						; size = 4
tv85 = -220						; size = 4
tv77 = -220						; size = 4
_currentPart$1 = -17					; size = 1
_i$2 = -8						; size = 2
_number$ = 8						; size = 4
_length$ = 12						; size = 2
_PrintBinary PROC					; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	for (short i = length; i != 0; --i)

	mov	ax, WORD PTR _length$[ebp]
	mov	WORD PTR _i$2[ebp], ax
	jmp	SHORT $LN3@PrintBinar
$LN2@PrintBinar:
	mov	ax, WORD PTR _i$2[ebp]
	sub	ax, 1
	mov	WORD PTR _i$2[ebp], ax
$LN3@PrintBinar:
	movsx	eax, WORD PTR _i$2[ebp]
	test	eax, eax
	je	$LN1@PrintBinar

; 11   : 	{
; 12   : 		byte currentPart = *(number + i - 1);

	movsx	eax, WORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _number$[ebp]
	mov	dl, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR _currentPart$1[ebp], dl

; 13   : 		currentPart & 0x80 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN6@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN7@PrintBinar
$LN6@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv77[ebp], eax
$LN7@PrintBinar:

; 14   : 		currentPart & 0x40 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN8@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN9@PrintBinar
$LN8@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
$LN9@PrintBinar:

; 15   : 		currentPart & 0x20 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN10@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN11@PrintBinar
$LN10@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
$LN11@PrintBinar:

; 16   : 		currentPart & 0x10 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN12@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN13@PrintBinar
$LN12@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv133[ebp], eax
$LN13@PrintBinar:

; 17   : 		currentPart & 0x08 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 8
	je	SHORT $LN14@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN15@PrintBinar
$LN14@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv141[ebp], eax
$LN15@PrintBinar:

; 18   : 		currentPart & 0x04 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 4
	je	SHORT $LN16@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN17@PrintBinar
$LN16@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv149[ebp], eax
$LN17@PrintBinar:

; 19   : 		currentPart & 0x02 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 2
	je	SHORT $LN18@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN19@PrintBinar
$LN18@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv157[ebp], eax
$LN19@PrintBinar:

; 20   : 		currentPart & 0x01 ? printf("1") : printf("0");

	movzx	eax, BYTE PTR _currentPart$1[ebp]
	and	eax, 1
	je	SHORT $LN20@PrintBinar
	mov	esi, esp
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN21@PrintBinar
$LN20@PrintBinar:
	mov	esi, esp
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv165[ebp], eax
$LN21@PrintBinar:

; 21   : 		printf(" ");

	mov	esi, esp
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 22   : 	}

	jmp	$LN2@PrintBinar
$LN1@PrintBinar:

; 23   : 	printf("\n\n");

	mov	esi, esp
	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 24   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PrintBinary ENDP
_TEXT	ENDS
END
